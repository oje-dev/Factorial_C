/* 
 * factorial.h - the declaration of factorial functions.
 * 
 * DO NOT EDIT THIS FILE.
 */
#ifndef _FACTORIAL_H
#define _FACTORIAL_H

/* 
 * factorial - an iterative implementation of a function to calculate the
 * factorial of a positive integer. An iterative solution means that a 
 * while or for loop is used to calculate the factorial.
 * See: https://en.wikipedia.org/wiki/Factorial for the definition of the 
 * factorial of a positive integer.
 * 
 * Usage:
 *      int fac = factorial(4);     // to calculate the factorial of 4
 * 
 * Parameters:
 * n - a positive integer (greater than or equal to 0).
 * 
 * Return values:
 * If successful, the function returns the factorial of n. If n is less 
 * than 0, the function returns -1 and the global errno is set to indicate the
 * the error.
 *
 * Errors:
 * If n is less than 0, errno is set to EINVAL for invald argument.
 * In addition, large enough n will cause int overflow (the result
 * will be too large to represent as an int).
 *
 * Note: EINVAL is the constant 22.
 */
int factorial(int n);

/* 
 * rfactorial - a recursive implementation of a function to calculate the
 * factorial of a positive integer. A recursive solution means that a 
 * recursion is used to calculate the factorial (the function calls itself
 * for each step of the calculation).
 * See: https://en.wikipedia.org/wiki/Factorial for the definition of the 
 * factorial of a positive integer.
 * 
 * Usage:
 *      int fac = rfactorial(4);    // to calculate the factorial of 4
 * 
 * Parameters:
 * n - a positive integer (greater than or equal to 0).
 * 
 * Return value:
 * If successful, the function returns the factorial of n. If n is less 
 * than 0, the function returns -1 and the global errno is set to indicate the
 * the error.
 *
 * Errors:
 * If n is less than 0, errno is set to EINVAL for invald argument.
 * In addition, large enough n will cause int overflow (the result
 * will be too large to represent as an int).
 * Large n will also exhaust available memory on the stack.
 *
 * Note: EINVAL is the constant 22.
 */
int rfactorial(int n);

/* 
 * trfactorial - a tail-recursive implementation of a function to calculate the
 * factorial of a positive integer. A recursive solution means that
 * recursion is used to calculate the factorial (the function calls itself
 * for each step of the calculation). In a tail-recursive function, the 
 * recursive call is the last thing the function does.
 * See: https://en.wikipedia.org/wiki/Factorial for the definition of the 
 * factorial of a positive integer.
 * See https://en.wikipedia.org/wiki/Tail_call for the definition of tail
 * recursion.
 *
 * Usage:
 *      int fac = trfactorial(4, 1);    // to calculate the factorial of 4
 * 
 * Parameters:
 * n - a positive integer (greater than or equal to 0).
 * fac - the current accumulated calculation of the factorial. Use the 
 * value 1 for the first call of the function.
 * 
 * Return value:
 * If successful, the function returns the factorial of n. If n is less 
 * than 0, the function returns -1 and the global errno is set to indicate the
 * the error.
 *
 * Errors:
 * If n is less than 0, errno is set to EINVAL for invald argument.
 * In addition, large enough n will cause int overflow (the result
 * will be too large to represent as an int).
 *
 * Note: EINVAL is the constant 22.
 */
int trfactorial(int n, int fac);

#endif